# This workflow uses actions that are not certified by GitHub.  
# They are provided by a third-party and are governed by 
# separate terms of service, privacy policy, and support  
# documentation.  
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle
name: Java CI with Gradle
on: 
  push:
    branches: [ "cicd" ]
  pull_request:
    branches: [ "cicd" ]
permissions:
  contents: read
 
env:
  ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
  IMAGE_TAG: "latest"
 
 
  
jobs:
  ci:
    defaults:
      run:
        working-directory: ./backend
    runs-on: ubuntu-latest
    steps:
    - name: Set up actions
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.ACTION_TOKEN }}
        submodules: true
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: check-config
      run: ls
    - name: copy-config
      run: cp -r ../cherish-config/resources ./src/resources
    - name: ls
      run: ls ./src/resources
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
    - name: Build with Gradle
      run: ./gradlew clean build
    - name: ls
      run: ls ./build/libs
    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v2
    #   with:
    #     aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
    #     aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}} 
    #     aws-region: ${{secrets.AWS_REGION}}

    - name: executing remote ssh commands using ssh key
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: whoami

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      run: |
        docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}


